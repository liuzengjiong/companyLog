package org.companyLog.dao;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;
import org.companyLog.bean.Log;
import org.companyLog.bean.LogShower;
import org.companyLog.provider.CustomSqlProvider;
import org.companyLog.provider.SqlSelectProvider;

public interface LogMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table log
     *
     * @mbggenerated Tue Mar 14 23:47:47 CST 2017
     */
    @Delete({
        "delete from log",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table log
     *
     * @mbggenerated Tue Mar 14 23:47:47 CST 2017
     */
    @Insert({
        "insert into log (id, author_id, ",
        "is_limit_see, create_time, ",
        "update_time, title, ",
        "group_id, read_num, ",
        "summary, content)",
        "values (#{id,jdbcType=VARCHAR}, #{authorId,jdbcType=VARCHAR}, ",
        "#{isLimitSee,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, ",
        "#{updateTime,jdbcType=TIMESTAMP}, #{title,jdbcType=VARCHAR}, ",
        "#{groupId,jdbcType=INTEGER}, #{readNum,jdbcType=INTEGER}, ",
        "#{summary,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR})"
    })
    int insert(Log record);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table log
     *
     * @mbggenerated Tue Mar 14 23:47:47 CST 2017
     */
    @Select({
        "select",
        "id, author_id, is_limit_see, create_time, update_time, title, group_id, read_num, ",
        "summary, content",
        "from log"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="author_id", property="authorId", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_limit_see", property="isLimitSee", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="group_id", property="groupId", jdbcType=JdbcType.INTEGER),
        @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
        @Result(column="summary", property="summary", jdbcType=JdbcType.VARCHAR),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    List<Log> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table log
     *
     * @mbggenerated Tue Mar 14 23:47:47 CST 2017
     */
    @Update({
        "update log",
        "set author_id = ifnull(#{authorId,jdbcType=VARCHAR},author_id),",
          "is_limit_see = ifnull(#{isLimitSee,jdbcType=INTEGER},is_limit_see),",
          "create_time = ifnull(#{createTime,jdbcType=TIMESTAMP},create_time),",
          "update_time = ifnull(#{updateTime,jdbcType=TIMESTAMP},update_time),",
          "title = ifnull(#{title,jdbcType=VARCHAR},title),",
          "group_id = ifnull(#{groupId,jdbcType=INTEGER},group_id),",
          "read_num = ifnull(#{readNum,jdbcType=INTEGER},read_num),",
          "summary = ifnull(#{summary,jdbcType=VARCHAR},summary),",
          "content = ifnull(#{content,jdbcType=LONGVARCHAR},content)",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Log record);
    
  //自定义
    @Select({
        "select",
        "id, author_id, is_limit_see, create_time, update_time, title, group_id, read_num, ",
        "summary, content",
        "from log",
        "where author_id = #{authorId,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="author_id", property="authorId", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_limit_see", property="isLimitSee", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="content", property="content", jdbcType=JdbcType.VARCHAR),
        @Result(column="group_id", property="groupId", jdbcType=JdbcType.INTEGER),
        @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER)
    })
    List<Log> selectByAuthor(String authorId);
    
    @Update({
        "update log",
        "set read_num = case when read_num is null then 1 else read_num+1 end",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int addReadNum(String id);
    
    @Select({
        "select",
        "l.id, l.author_id, l.is_limit_see, l.create_time, l.update_time, l.title, l.group_id, l.read_num, ",
        "l.summary, l.content",
        ",case when lc.id is null then false else true end as haveCollect",
        ",ifnull(count(c.id),'0') as commentNum ",
        "from log l ",
        	"left join log_collection lc",
        		"on l.id = lc.log_id and lc.user_id = #{1,jdbcType=VARCHAR}",
        	"left join comment c ",
    			"on c.log_id=l.id",
        "where l.id = #{0,jdbcType=VARCHAR}",
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="author_id", property="authorId", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_limit_see", property="isLimitSee", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="group_id", property="groupId", jdbcType=JdbcType.INTEGER),
        @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
        @Result(column="summary", property="summary", jdbcType=JdbcType.VARCHAR),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR),
        
        @Result(column="authorName", property="authorName", jdbcType=JdbcType.VARCHAR),
        @Result(column="commentNum", property="commentNum", jdbcType=JdbcType.INTEGER),
        @Result(column="haveCollect", property="haveCollect", jdbcType=JdbcType.BOOLEAN)
    })
    LogShower selectByPrimaryKey(String id,String userId);
    
    
  //Provider方法
    
    //原生sql查询
    @SelectProvider(type = CustomSqlProvider.class, method = "getSql")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="author_id", property="authorId", jdbcType=JdbcType.VARCHAR),
        @Result(column="is_limit_see", property="isLimitSee", jdbcType=JdbcType.INTEGER),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
        @Result(column="content", property="content", jdbcType=JdbcType.VARCHAR),
        @Result(column="group_id", property="groupId", jdbcType=JdbcType.INTEGER),
        @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
        
        @Result(column="commentNum", property="commentNum", jdbcType=JdbcType.INTEGER),
        @Result(column="authorName", property="authorName", jdbcType=JdbcType.VARCHAR),
        @Result(column="haveCollect", property="haveCollect", jdbcType=JdbcType.BOOLEAN)
    })
    public List<LogShower> getLogPageBySql(String sql);
    
    //TODO SQL构造器查询 列表 
  @SelectProvider(type = SqlSelectProvider.class, method = "select")
  @Results({
      @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
      @Result(column="author_id", property="authorId", jdbcType=JdbcType.VARCHAR),
      @Result(column="is_limit_see", property="isLimitSee", jdbcType=JdbcType.INTEGER),
      @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
      @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
      @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
      @Result(column="content", property="content", jdbcType=JdbcType.VARCHAR),
      @Result(column="group_id", property="groupId", jdbcType=JdbcType.INTEGER),
      @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
      
  })
  /**
   * TODO SQL构造器查询 列表
   * @return
   */
  public List<Log> getLogPage(@Param(value="table")String table,
  		@Param(value="colums")String colums,
  		@Param(value="order")String order,
  		@Param(value="index")String index,
  		@Param(value="rows")String rows,
  		@Param(value="eqCondition")Map<String,String> eqCondition,
  		@Param(value="likeCondition")Map<String,String> likeCondition);
    
  	//SQL构造器查询 总数
    @SelectProvider(type = SqlSelectProvider.class, method = "selectCount")
    public int getLogCount(@Param(value="table")String table,
    		@Param(value="eqCondition")Map<String,String> eqCondition,
    		@Param(value="likeCondition")Map<String,String> likeCondition);
    
  //原生sql查询
    @SelectProvider(type = CustomSqlProvider.class, method = "getSql")
    public int getLogCountBySql(String sql);
    
    
    
    
    
    
}