package org.companyLog.dao;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;
import org.companyLog.bean.Role;

public interface RoleMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @mbggenerated Sun Mar 12 23:29:05 CST 2017
     */
    @Delete({
        "delete from role",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @mbggenerated Sun Mar 12 23:29:05 CST 2017
     */
    @Insert({
        "insert into role (id, role_code, ",
        "role_name)",
        "values (#{id,jdbcType=VARCHAR}, #{roleCode,jdbcType=VARCHAR}, ",
        "#{roleName,jdbcType=VARCHAR})"
    })
    int insert(Role record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @mbggenerated Sun Mar 12 23:29:05 CST 2017
     */
    @Select({
        "select",
        "id, role_code, role_name",
        "from role",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="role_code", property="roleCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="role_name", property="roleName", jdbcType=JdbcType.VARCHAR)
    })
    Role selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @mbggenerated Sun Mar 12 23:29:05 CST 2017
     */
    @Select({
        "select",
        "id, role_code, role_name",
        "from role"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="role_code", property="roleCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="role_name", property="roleName", jdbcType=JdbcType.VARCHAR)
    })
    List<Role> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table role
     *
     * @mbggenerated Sun Mar 12 23:29:05 CST 2017
     */
    @Update({
        "update role",
        "set role_code = #{roleCode,jdbcType=VARCHAR},",
          "role_name = #{roleName,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Role record);
    
    //自定义
    @Select({
        "select",
        "id, role_code, role_name",
        "from role",
        "where role_name = #{roleName,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="role_code", property="roleCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="role_name", property="roleName", jdbcType=JdbcType.VARCHAR)
    })
    Role selectByRoleName(String roleName);
    
    //带权限的角色
    List<Role> queryAllRole(
    		@Param("index") Integer index,
    		@Param("rows") Integer rows,
    		@Param("likeCondition")Map<String,String> likeCondition);
    
    int queryAllRoleCount(@Param("likeCondition")Map<String,String> likeCondition);
    
    Role queryOneRole(@Param("id") String id);
}