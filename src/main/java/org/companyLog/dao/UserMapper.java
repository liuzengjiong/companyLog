package org.companyLog.dao;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Many;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;
import org.companyLog.bean.User;

public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Thu Mar 16 21:33:35 CST 2017
     */
    @Delete({
        "delete from user",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Thu Mar 16 21:33:35 CST 2017
     */
    @Insert({
        "insert into user (id, username, ",
        "password, nickname, ",
        "phone_number, email, ",
        "department_id, create_time)",
        "values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, ",
        "#{password,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, ",
        "#{phoneNumber,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, ",
        "#{departmentId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})"
    })
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Thu Mar 16 21:33:35 CST 2017
     */
    @Select({
        "select",
        "id, username, password, nickname, phone_number, email, department_id, create_time",
        "from user",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="nickname", property="nickname", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone_number", property="phoneNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="department_id", property="departmentId", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP)
    })
    User selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Thu Mar 16 21:33:35 CST 2017
     */
    @Select({
        "select",
        "id, username, password, nickname, phone_number, email, department_id, create_time",
        "from user"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="nickname", property="nickname", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone_number", property="phoneNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="department_id", property="departmentId", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(property = "roles", javaType = List.class, column = "id",  
        many = @Many(select = "ClassBDao.getClassBForClassA"))
    })
    List<User> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Thu Mar 16 21:33:35 CST 2017
     */
    @Update({
        "update user",
        "set username = ifnull(#{username,jdbcType=VARCHAR},username),",
          //"password = ifnull(#{password,jdbcType=VARCHAR},password),",
          "nickname = ifnull(#{nickname,jdbcType=VARCHAR},nickname),",
          "phone_number = ifnull(#{phoneNumber,jdbcType=VARCHAR},phone_number),",
          "email = ifnull(#{email,jdbcType=VARCHAR},email),",
          "department_id = ifnull(#{departmentId,jdbcType=VARCHAR},department_id),",
          "create_time = ifnull(#{createTime,jdbcType=TIMESTAMP},create_time)",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(User record);
    
    //自定义
    @Select({
        "select",
        "u.id,u.nickname",
        "from user u,user_role ur,role_permission rp,permission p",
        "where p.permission_code = #{id,jdbcType=VARCHAR}",
        "and u.id=ur.user_id and ur.role_id = rp.role_id",
        "and rp.permission_id = p.id"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="nickname", property="nickname", jdbcType=JdbcType.VARCHAR)
    })
    List<User> selectByPermissionCode(String permisisonCode);
    
    
    @Update({
        "update user",
          "set password = ifnull(#{password,jdbcType=VARCHAR},password)",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updatePasswordById(User record);
    
    @Select({
        "select",
        "id, username, password, nickname, phone_number, email, department_id, create_time",
        "from user",
        "where phone_number = #{phone,jdbcType=VARCHAR}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.VARCHAR, id=true),
        @Result(column="username", property="username", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="nickname", property="nickname", jdbcType=JdbcType.VARCHAR),
        @Result(column="phone_number", property="phoneNumber", jdbcType=JdbcType.VARCHAR),
        @Result(column="email", property="email", jdbcType=JdbcType.VARCHAR),
        @Result(column="department_id", property="departmentId", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP)
        
    })
    User selectByPhone(String phone);
    
    
    
    
    
    //配置文件中的方法
    User queryUser(@Param("id") String id);
    
    User queryUserByUsername(@Param("username") String username);
    
    List<User> queryAllUserWithRole(
    		@Param("index") Integer index,
    		@Param("rows") Integer rows,
    		@Param("eqCondition")Map<String,String> eqCondition);
    
    int queryAllUserCount(@Param("eqCondition")Map<String,String> eqCondition);
}